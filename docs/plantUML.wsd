@startuml Alphabot

enum Action {
    FORWARD
    LEFT
    RIGHT
    CLEAN
    IDLE
}

class EngineController {
    + moveForward(int time)
    + moveLeft(int time)
    + moveRight(int time)
}

class Cleaner {
    + perform()
}

class Camera {
    - cap: VideoCapture
    - isWebcam: bool
    - IP_CAM: string
    - getImage(): tuple<Mat, Mat>
    - connectToWebcam(): void
    - connectToIPcam(): void
    + Camera()
    + ~Camera()
    + sendToServer(): tuple<Mat, Mat>
    + changeCameraType()
    + setIPcam(ip: string)
    + getCameraType(): bool
}

class Graffiti {
    - exist: bool
    - posX: int
    - posY: int
    + Graffiti()
    + Graffiti(int x, int y)
    + setState(int x, int y, bool exists)
    + getPosX(): int
    + getPosY(): int
    + isExist(): bool
}

class Alphabot {
    - engineController: EngineController
    - cleaner: Cleaner
    - engineStarted: bool
    - posX: int
    - posY: int
    - state: Action
    - doAction(int time)
    + SetPosition(int x, int y)
    + getPosX(): int
    + getPosY(): int
    + startEngine()
    + stopEngine()
    + isEngineStarted(): bool
    + setState(int state)
    + run()
}

class ThresholdGenerator {
    - mask: Mat
    - hsv: Mat
    - frame: Mat
    - lowerHSV: vector<int>
    - upperHSV: vector<int>
    - commandTime: int
    - getHSVfromFile(): vector<vector<Scalar>>
    + ThresholdGenerator()
    + trackBar(): void
    + saveHSVtoFile(lowerHSV: vector<Scalar>&, upperHSV: vector<Scalar>&): void
    + recieveImage(hsv: const Mat&, frame: const Mat&): void
    + sendHSVtoServer(): vector<vector<Scalar>>
    + getHSV(): tuple<int, int, int, int, int, int>
    + getCommandTime(): string
}

class Server {
- alphabot: Alphabot
- graffiti: Graffiti
- camera: Camera
- thresholdGenerator: ThresholdGenerator
- frame: Mat
- hsv: Mat
- robotRes: Mat
- graffitiRes: Mat
- debugMode: bool
- angle: double
- showGraphics: bool
- dDist: int
- commandTime: string
- lowerHSV: vector<Scalar>
- upperHSV: vector<Scalar>
- AlphabotAngleCalc(purple_X: const int&, purple_Y: const int&, blue_X: const int&, 
blue_Y: const int&, target_X: const int&, target_Y:const int&): double
- drawGraphics(blue_X: const int&, blue_Y: const int&, purple_X: const int&, purple_Y: const int&, 
angle: const double&, purpleContour: bool, blueContour: bool, graffiti: Graffiti&)
- searchForGraffiti(): Graffiti
- searchForRobot()
- choseAction()
- showResults()
- mergeFrames()
+ Server()
+ receiveMessage()
+ sendImageToThresholdGenerator()
+ sendHSVToThresholdGenerator()
+ recieveHSVFromThresholdGenerator()
+ setDebugMode(isDebug: bool)
+ getShowGraphics(): bool
+ setHSV(color: string)
+ alphabotRun()
+ setCameraType()
+ readSettings()
}

class KeyParser {
    -server : Server*
    -debugMode : bool
    -keys : struct
    +KeyParser(server: Server*)
    +parseKeys() : bool
}

class Mqtt {
- brokerIP: string
- topic: string
- prevMessage: string
- pathToConfig: string
- makeCommand(message: string, time: string): string
- findPathToConfig(): void
+ Mqtt()
+ getPathToConfig(): string
+ setupBroker(brokerIP: string, topic: string): void
+ publish(command: string, time: string): void
}

EngineController --* Alphabot
Cleaner --* Alphabot
Alphabot *- Graffiti
Action -> Alphabot
Action --> Server
Graffiti --* Server
Server *- ThresholdGenerator
Camera -* Server
Alphabot --* Server
Server --* KeyParser
Mqtt --> Server
@enduml